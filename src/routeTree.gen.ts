/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangIndexRouteImport } from './routes/$lang/index'
import { Route as LangNotFoundRouteImport } from './routes/$lang/not-found'
import { Route as LangErrorRouteImport } from './routes/$lang/error'
import { Route as LangAboutRouteImport } from './routes/$lang/about'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as RobotsDottxtServerRouteImport } from './routes/robots[.]txt'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangIndexRoute = LangIndexRouteImport.update({
  id: '/$lang/',
  path: '/$lang/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangNotFoundRoute = LangNotFoundRouteImport.update({
  id: '/$lang/not-found',
  path: '/$lang/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const LangErrorRoute = LangErrorRouteImport.update({
  id: '/$lang/error',
  path: '/$lang/error',
  getParentRoute: () => rootRouteImport,
} as any)
const LangAboutRoute = LangAboutRouteImport.update({
  id: '/$lang/about',
  path: '/$lang/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RobotsDottxtServerRoute = RobotsDottxtServerRouteImport.update({
  id: '/robots.txt',
  path: '/robots.txt',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang/about': typeof LangAboutRoute
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang': typeof LangIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang/about': typeof LangAboutRoute
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang': typeof LangIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang/about': typeof LangAboutRoute
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/': typeof LangIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang/about'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$lang/about' | '/$lang/error' | '/$lang/not-found' | '/$lang'
  id:
    | '__root__'
    | '/'
    | '/$lang/about'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangAboutRoute: typeof LangAboutRoute
  LangErrorRoute: typeof LangErrorRoute
  LangNotFoundRoute: typeof LangNotFoundRoute
  LangIndexRoute: typeof LangIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/robots.txt' | '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/robots.txt' | '/sitemap.xml'
  id: '__root__' | '/robots.txt' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  RobotsDottxtServerRoute: typeof RobotsDottxtServerRoute
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/not-found': {
      id: '/$lang/not-found'
      path: '/$lang/not-found'
      fullPath: '/$lang/not-found'
      preLoaderRoute: typeof LangNotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/error': {
      id: '/$lang/error'
      path: '/$lang/error'
      fullPath: '/$lang/error'
      preLoaderRoute: typeof LangErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/about': {
      id: '/$lang/about'
      path: '/$lang/about'
      fullPath: '/$lang/about'
      preLoaderRoute: typeof LangAboutRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/robots.txt': {
      id: '/robots.txt'
      path: '/robots.txt'
      fullPath: '/robots.txt'
      preLoaderRoute: typeof RobotsDottxtServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangAboutRoute: LangAboutRoute,
  LangErrorRoute: LangErrorRoute,
  LangNotFoundRoute: LangNotFoundRoute,
  LangIndexRoute: LangIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  RobotsDottxtServerRoute: RobotsDottxtServerRoute,
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
